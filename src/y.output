

Terminals which are not used:

   RESIZE
   DISABLE
   ENABLE
   PLEASE
   SPLATTERED
   TESTNZ
   C_AND
   C_OR
   C_XOR
   C_NOT
   EQUALS
   AND
   OR
   XOR
   FIN
   MESH32
   WHIRL
   WHIRL2
   WHIRL3
   WHIRL4
   WHIRL5


Conflict in state 114 between rule 64 and token SPARK resolved as reduce.
Conflict in state 114 between rule 64 and token EARS resolved as reduce.

Grammar
rule 1    program ->		/* empty */
rule 2    program -> program command
rule 3    command -> please perform
rule 4    command -> please OHOHSEVEN perform
rule 5    command -> LABEL please perform
rule 6    command -> LABEL please OHOHSEVEN perform
rule 7    command -> error
rule 8    please -> DO
rule 9    please -> DO NOT
rule 10   perform -> lvalue GETS expr
rule 11   perform -> array GETS byexpr
rule 12   perform -> LABEL NEXT
rule 13   perform -> FORGET expr
rule 14   perform -> RESUME expr
rule 15   perform -> STASH varlist
rule 16   perform -> RETRIEVE varlist
rule 17   perform -> IGNORE varlist
rule 18   perform -> REMEMBER varlist
rule 19   perform -> ABSTAIN LABEL
rule 20   perform -> ABSTAIN gerunds
rule 21   perform -> REINSTATE LABEL
rule 22   perform -> REINSTATE gerunds
rule 23   perform -> WRITE_IN inlist
rule 24   perform -> READ_OUT outlist
rule 25   perform -> GIVE_UP
rule 26   perform -> COME_FROM LABEL
rule 27   perform -> BADCHAR
rule 28   perform -> error
rule 29   gerunds -> GERUND
rule 30   gerunds -> gerunds INTERSECTION GERUND
rule 31   variable -> scalar
rule 32   variable -> array
rule 33   lvalue -> scalar
rule 34   lvalue -> subscr
rule 35   scalar -> ONESPOT NUMBER
rule 36   scalar -> TWOSPOT NUMBER
rule 37   array -> TAIL NUMBER
rule 38   array -> HYBRID NUMBER
rule 39   oparray -> TAIL UNARY NUMBER
rule 40   oparray -> HYBRID UNARY NUMBER
rule 41   constant -> MESH NUMBER
rule 42   varlist -> variable
rule 43   varlist -> varlist INTERSECTION variable
rule 44   initem -> scalar
rule 45   initem -> subscr
rule 46   initem -> array
rule 47   inlist -> initem INTERSECTION inlist
rule 48   inlist -> initem
rule 49   outitem -> scalar
rule 50   outitem -> subscr
rule 51   outitem -> constant
rule 52   outitem -> array
rule 53   outlist -> outitem INTERSECTION outlist
rule 54   outlist -> outitem
rule 55   byexpr -> expr BY byexpr
rule 56   byexpr -> expr
rule 57   subscr -> subscr1
rule 58   subscr -> array SUB sublist
rule 59   subscr1 -> array SUB sublist1
rule 60   sublist -> unambig sublist
rule 61   sublist -> unambig sublist1
rule 62   sublist1 -> subscr1
rule 63   sublist1 -> osubscr1
rule 64   sublist1 -> unambig
rule 65   osubscr -> osubscr1
rule 66   osubscr -> oparray SUB sublist
rule 67   osubscr1 -> oparray SUB sublist1
rule 68   expr -> unambig
rule 69   expr -> unambig SELECT unambig
rule 70   expr -> unambig SELECT subscr
rule 71   expr -> unambig SELECT osubscr
rule 72   expr -> unambig MINGLE unambig
rule 73   expr -> unambig MINGLE subscr
rule 74   expr -> unambig MINGLE osubscr
rule 75   expr -> subscr
rule 76   expr -> osubscr
rule 77   preftype -> MESH
rule 78   preftype -> ONESPOT
rule 79   preftype -> TWOSPOT
rule 80   unambig -> variable
rule 81   unambig -> constant
rule 82   unambig -> preftype UNARY NUMBER
rule 83   unambig -> SPARK UNARY expr SPARK
rule 84   unambig -> EARS UNARY expr EARS
rule 85   unambig -> SPARK expr SPARK
rule 86   unambig -> EARS expr EARS

Terminals, with rules where they appear

$ (-1)
error (256) 7 28
GETS (258) 10 11
RESIZE (259)
NEXT (260) 12
FORGET (261) 13
RESUME (262) 14
STASH (263) 15
RETRIEVE (264) 16
IGNORE (265) 17
REMEMBER (266) 18
ABSTAIN (267) 19 20
REINSTATE (268) 21 22
DISABLE (269)
ENABLE (270)
GIVE_UP (271) 25
READ_OUT (272) 24
WRITE_IN (273) 23
COME_FROM (274) 26
DO (275) 8 9
PLEASE (276)
NOT (277) 9
MESH (278) 41 77
ONESPOT (279) 35 78
TWOSPOT (280) 36 79
TAIL (281) 37 39
HYBRID (282) 38 40
MINGLE (283) 72 73 74
SELECT (284) 69 70 71
SPARK (285) 83 85
EARS (286) 84 86
SUB (287) 58 59 66 67
BY (288) 55
BADCHAR (289) 27
NUMBER (290) 35 36 37 38 39 40 41 82
UNARY (291) 39 40 82 83 84
OHOHSEVEN (292) 4 6
GERUND (293) 29 30
LABEL (294) 5 6 12 19 21 26
INTERSECTION (295) 30 43 47 53
SPLATTERED (296)
TESTNZ (297)
C_AND (298)
C_OR (299)
C_XOR (300)
C_NOT (301)
EQUALS (302)
AND (303)
OR (304)
XOR (305)
FIN (306)
MESH32 (307)
WHIRL (308)
WHIRL2 (309)
WHIRL3 (310)
WHIRL4 (311)
WHIRL5 (312)
HIGHPREC (313)

Nonterminals, with rules where they appear

program (59)
    on left: 1 2, on right: 2
command (60)
    on left: 3 4 5 6 7, on right: 2
please (61)
    on left: 8 9, on right: 3 4 5 6
perform (62)
    on left: 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
    28, on right: 3 4 5 6
gerunds (63)
    on left: 29 30, on right: 20 22 30
variable (64)
    on left: 31 32, on right: 42 43 80
lvalue (65)
    on left: 33 34, on right: 10
scalar (66)
    on left: 35 36, on right: 31 33 44 49
array (67)
    on left: 37 38, on right: 11 32 46 52 58 59
oparray (68)
    on left: 39 40, on right: 66 67
constant (69)
    on left: 41, on right: 51 81
varlist (70)
    on left: 42 43, on right: 15 16 17 18 43
initem (71)
    on left: 44 45 46, on right: 47 48
inlist (72)
    on left: 47 48, on right: 23 47
outitem (73)
    on left: 49 50 51 52, on right: 53 54
outlist (74)
    on left: 53 54, on right: 24 53
byexpr (75)
    on left: 55 56, on right: 11 55
subscr (76)
    on left: 57 58, on right: 34 45 50 70 73 75
subscr1 (77)
    on left: 59, on right: 57 62
sublist (78)
    on left: 60 61, on right: 58 60 66
sublist1 (79)
    on left: 62 63 64, on right: 59 61 67
osubscr (80)
    on left: 65 66, on right: 71 74 76
osubscr1 (81)
    on left: 67, on right: 63 65
expr (82)
    on left: 68 69 70 71 72 73 74 75 76, on right: 10 13 14 55 56 83
    84 85 86
preftype (83)
    on left: 77 78 79, on right: 82
unambig (84)
    on left: 80 81 82 83 84 85 86, on right: 60 61 64 68 69 70 71 72
    73 74


state 0

    $default	reduce using rule 1 (program)

    program	go to state 1



state 1

    program  ->  program . command   (rule 2)

    $   	go to state 143
    error	shift, and go to state 2
    DO  	shift, and go to state 3
    LABEL	shift, and go to state 4

    command	go to state 5
    please	go to state 6



state 2

    command  ->  error .   (rule 7)

    $default	reduce using rule 7 (command)



state 3

    please  ->  DO .   (rule 8)
    please  ->  DO . NOT   (rule 9)

    NOT 	shift, and go to state 7

    $default	reduce using rule 8 (please)



state 4

    command  ->  LABEL . please perform   (rule 5)
    command  ->  LABEL . please OHOHSEVEN perform   (rule 6)

    DO  	shift, and go to state 3

    please	go to state 8



state 5

    program  ->  program command .   (rule 2)

    $default	reduce using rule 2 (program)



state 6

    command  ->  please . perform   (rule 3)
    command  ->  please . OHOHSEVEN perform   (rule 4)

    error	shift, and go to state 9
    FORGET	shift, and go to state 10
    RESUME	shift, and go to state 11
    STASH	shift, and go to state 12
    RETRIEVE	shift, and go to state 13
    IGNORE	shift, and go to state 14
    REMEMBER	shift, and go to state 15
    ABSTAIN	shift, and go to state 16
    REINSTATE	shift, and go to state 17
    GIVE_UP	shift, and go to state 18
    READ_OUT	shift, and go to state 19
    WRITE_IN	shift, and go to state 20
    COME_FROM	shift, and go to state 21
    ONESPOT	shift, and go to state 22
    TWOSPOT	shift, and go to state 23
    TAIL	shift, and go to state 24
    HYBRID	shift, and go to state 25
    BADCHAR	shift, and go to state 26
    OHOHSEVEN	shift, and go to state 27
    LABEL	shift, and go to state 28

    perform	go to state 29
    lvalue	go to state 30
    scalar	go to state 31
    array	go to state 32
    subscr	go to state 33
    subscr1	go to state 34



state 7

    please  ->  DO NOT .   (rule 9)

    $default	reduce using rule 9 (please)



state 8

    command  ->  LABEL please . perform   (rule 5)
    command  ->  LABEL please . OHOHSEVEN perform   (rule 6)

    error	shift, and go to state 9
    FORGET	shift, and go to state 10
    RESUME	shift, and go to state 11
    STASH	shift, and go to state 12
    RETRIEVE	shift, and go to state 13
    IGNORE	shift, and go to state 14
    REMEMBER	shift, and go to state 15
    ABSTAIN	shift, and go to state 16
    REINSTATE	shift, and go to state 17
    GIVE_UP	shift, and go to state 18
    READ_OUT	shift, and go to state 19
    WRITE_IN	shift, and go to state 20
    COME_FROM	shift, and go to state 21
    ONESPOT	shift, and go to state 22
    TWOSPOT	shift, and go to state 23
    TAIL	shift, and go to state 24
    HYBRID	shift, and go to state 25
    BADCHAR	shift, and go to state 26
    OHOHSEVEN	shift, and go to state 35
    LABEL	shift, and go to state 28

    perform	go to state 36
    lvalue	go to state 30
    scalar	go to state 31
    array	go to state 32
    subscr	go to state 33
    subscr1	go to state 34



state 9

    perform  ->  error .   (rule 28)

    $default	reduce using rule 28 (perform)



state 10

    perform  ->  FORGET . expr   (rule 13)

    MESH	shift, and go to state 37
    ONESPOT	shift, and go to state 38
    TWOSPOT	shift, and go to state 39
    TAIL	shift, and go to state 40
    HYBRID	shift, and go to state 41
    SPARK	shift, and go to state 42
    EARS	shift, and go to state 43

    variable	go to state 44
    scalar	go to state 45
    array	go to state 46
    oparray	go to state 47
    constant	go to state 48
    subscr	go to state 49
    subscr1	go to state 34
    osubscr	go to state 50
    osubscr1	go to state 51
    expr	go to state 52
    preftype	go to state 53
    unambig	go to state 54



state 11

    perform  ->  RESUME . expr   (rule 14)

    MESH	shift, and go to state 37
    ONESPOT	shift, and go to state 38
    TWOSPOT	shift, and go to state 39
    TAIL	shift, and go to state 40
    HYBRID	shift, and go to state 41
    SPARK	shift, and go to state 42
    EARS	shift, and go to state 43

    variable	go to state 44
    scalar	go to state 45
    array	go to state 46
    oparray	go to state 47
    constant	go to state 48
    subscr	go to state 49
    subscr1	go to state 34
    osubscr	go to state 50
    osubscr1	go to state 51
    expr	go to state 55
    preftype	go to state 53
    unambig	go to state 54



state 12

    perform  ->  STASH . varlist   (rule 15)

    ONESPOT	shift, and go to state 22
    TWOSPOT	shift, and go to state 23
    TAIL	shift, and go to state 24
    HYBRID	shift, and go to state 25

    variable	go to state 56
    scalar	go to state 45
    array	go to state 57
    varlist	go to state 58



state 13

    perform  ->  RETRIEVE . varlist   (rule 16)

    ONESPOT	shift, and go to state 22
    TWOSPOT	shift, and go to state 23
    TAIL	shift, and go to state 24
    HYBRID	shift, and go to state 25

    variable	go to state 56
    scalar	go to state 45
    array	go to state 57
    varlist	go to state 59



state 14

    perform  ->  IGNORE . varlist   (rule 17)

    ONESPOT	shift, and go to state 22
    TWOSPOT	shift, and go to state 23
    TAIL	shift, and go to state 24
    HYBRID	shift, and go to state 25

    variable	go to state 56
    scalar	go to state 45
    array	go to state 57
    varlist	go to state 60



state 15

    perform  ->  REMEMBER . varlist   (rule 18)

    ONESPOT	shift, and go to state 22
    TWOSPOT	shift, and go to state 23
    TAIL	shift, and go to state 24
    HYBRID	shift, and go to state 25

    variable	go to state 56
    scalar	go to state 45
    array	go to state 57
    varlist	go to state 61



state 16

    perform  ->  ABSTAIN . LABEL   (rule 19)
    perform  ->  ABSTAIN . gerunds   (rule 20)

    GERUND	shift, and go to state 62
    LABEL	shift, and go to state 63

    gerunds	go to state 64



state 17

    perform  ->  REINSTATE . LABEL   (rule 21)
    perform  ->  REINSTATE . gerunds   (rule 22)

    GERUND	shift, and go to state 62
    LABEL	shift, and go to state 65

    gerunds	go to state 66



state 18

    perform  ->  GIVE_UP .   (rule 25)

    $default	reduce using rule 25 (perform)



state 19

    perform  ->  READ_OUT . outlist   (rule 24)

    MESH	shift, and go to state 67
    ONESPOT	shift, and go to state 22
    TWOSPOT	shift, and go to state 23
    TAIL	shift, and go to state 24
    HYBRID	shift, and go to state 25

    scalar	go to state 68
    array	go to state 69
    constant	go to state 70
    outitem	go to state 71
    outlist	go to state 72
    subscr	go to state 73
    subscr1	go to state 34



state 20

    perform  ->  WRITE_IN . inlist   (rule 23)

    ONESPOT	shift, and go to state 22
    TWOSPOT	shift, and go to state 23
    TAIL	shift, and go to state 24
    HYBRID	shift, and go to state 25

    scalar	go to state 74
    array	go to state 75
    initem	go to state 76
    inlist	go to state 77
    subscr	go to state 78
    subscr1	go to state 34



state 21

    perform  ->  COME_FROM . LABEL   (rule 26)

    LABEL	shift, and go to state 79



state 22

    scalar  ->  ONESPOT . NUMBER   (rule 35)

    NUMBER	shift, and go to state 80



state 23

    scalar  ->  TWOSPOT . NUMBER   (rule 36)

    NUMBER	shift, and go to state 81



state 24

    array  ->  TAIL . NUMBER   (rule 37)

    NUMBER	shift, and go to state 82



state 25

    array  ->  HYBRID . NUMBER   (rule 38)

    NUMBER	shift, and go to state 83



state 26

    perform  ->  BADCHAR .   (rule 27)

    $default	reduce using rule 27 (perform)



state 27

    command  ->  please OHOHSEVEN . perform   (rule 4)

    error	shift, and go to state 9
    FORGET	shift, and go to state 10
    RESUME	shift, and go to state 11
    STASH	shift, and go to state 12
    RETRIEVE	shift, and go to state 13
    IGNORE	shift, and go to state 14
    REMEMBER	shift, and go to state 15
    ABSTAIN	shift, and go to state 16
    REINSTATE	shift, and go to state 17
    GIVE_UP	shift, and go to state 18
    READ_OUT	shift, and go to state 19
    WRITE_IN	shift, and go to state 20
    COME_FROM	shift, and go to state 21
    ONESPOT	shift, and go to state 22
    TWOSPOT	shift, and go to state 23
    TAIL	shift, and go to state 24
    HYBRID	shift, and go to state 25
    BADCHAR	shift, and go to state 26
    LABEL	shift, and go to state 28

    perform	go to state 84
    lvalue	go to state 30
    scalar	go to state 31
    array	go to state 32
    subscr	go to state 33
    subscr1	go to state 34



state 28

    perform  ->  LABEL . NEXT   (rule 12)

    NEXT	shift, and go to state 85



state 29

    command  ->  please perform .   (rule 3)

    $default	reduce using rule 3 (command)



state 30

    perform  ->  lvalue . GETS expr   (rule 10)

    GETS	shift, and go to state 86



state 31

    lvalue  ->  scalar .   (rule 33)

    $default	reduce using rule 33 (lvalue)



state 32

    perform  ->  array . GETS byexpr   (rule 11)
    subscr  ->  array . SUB sublist   (rule 58)
    subscr1  ->  array . SUB sublist1   (rule 59)

    GETS	shift, and go to state 87
    SUB 	shift, and go to state 88



state 33

    lvalue  ->  subscr .   (rule 34)

    $default	reduce using rule 34 (lvalue)



state 34

    subscr  ->  subscr1 .   (rule 57)

    $default	reduce using rule 57 (subscr)



state 35

    command  ->  LABEL please OHOHSEVEN . perform   (rule 6)

    error	shift, and go to state 9
    FORGET	shift, and go to state 10
    RESUME	shift, and go to state 11
    STASH	shift, and go to state 12
    RETRIEVE	shift, and go to state 13
    IGNORE	shift, and go to state 14
    REMEMBER	shift, and go to state 15
    ABSTAIN	shift, and go to state 16
    REINSTATE	shift, and go to state 17
    GIVE_UP	shift, and go to state 18
    READ_OUT	shift, and go to state 19
    WRITE_IN	shift, and go to state 20
    COME_FROM	shift, and go to state 21
    ONESPOT	shift, and go to state 22
    TWOSPOT	shift, and go to state 23
    TAIL	shift, and go to state 24
    HYBRID	shift, and go to state 25
    BADCHAR	shift, and go to state 26
    LABEL	shift, and go to state 28

    perform	go to state 89
    lvalue	go to state 30
    scalar	go to state 31
    array	go to state 32
    subscr	go to state 33
    subscr1	go to state 34



state 36

    command  ->  LABEL please perform .   (rule 5)

    $default	reduce using rule 5 (command)



state 37

    constant  ->  MESH . NUMBER   (rule 41)
    preftype  ->  MESH .   (rule 77)

    NUMBER	shift, and go to state 90

    $default	reduce using rule 77 (preftype)



state 38

    scalar  ->  ONESPOT . NUMBER   (rule 35)
    preftype  ->  ONESPOT .   (rule 78)

    NUMBER	shift, and go to state 80

    $default	reduce using rule 78 (preftype)



state 39

    scalar  ->  TWOSPOT . NUMBER   (rule 36)
    preftype  ->  TWOSPOT .   (rule 79)

    NUMBER	shift, and go to state 81

    $default	reduce using rule 79 (preftype)



state 40

    array  ->  TAIL . NUMBER   (rule 37)
    oparray  ->  TAIL . UNARY NUMBER   (rule 39)

    NUMBER	shift, and go to state 82
    UNARY	shift, and go to state 91



state 41

    array  ->  HYBRID . NUMBER   (rule 38)
    oparray  ->  HYBRID . UNARY NUMBER   (rule 40)

    NUMBER	shift, and go to state 83
    UNARY	shift, and go to state 92



state 42

    unambig  ->  SPARK . UNARY expr SPARK   (rule 83)
    unambig  ->  SPARK . expr SPARK   (rule 85)

    MESH	shift, and go to state 37
    ONESPOT	shift, and go to state 38
    TWOSPOT	shift, and go to state 39
    TAIL	shift, and go to state 40
    HYBRID	shift, and go to state 41
    SPARK	shift, and go to state 42
    EARS	shift, and go to state 43
    UNARY	shift, and go to state 93

    variable	go to state 44
    scalar	go to state 45
    array	go to state 46
    oparray	go to state 47
    constant	go to state 48
    subscr	go to state 49
    subscr1	go to state 34
    osubscr	go to state 50
    osubscr1	go to state 51
    expr	go to state 94
    preftype	go to state 53
    unambig	go to state 54



state 43

    unambig  ->  EARS . UNARY expr EARS   (rule 84)
    unambig  ->  EARS . expr EARS   (rule 86)

    MESH	shift, and go to state 37
    ONESPOT	shift, and go to state 38
    TWOSPOT	shift, and go to state 39
    TAIL	shift, and go to state 40
    HYBRID	shift, and go to state 41
    SPARK	shift, and go to state 42
    EARS	shift, and go to state 43
    UNARY	shift, and go to state 95

    variable	go to state 44
    scalar	go to state 45
    array	go to state 46
    oparray	go to state 47
    constant	go to state 48
    subscr	go to state 49
    subscr1	go to state 34
    osubscr	go to state 50
    osubscr1	go to state 51
    expr	go to state 96
    preftype	go to state 53
    unambig	go to state 54



state 44

    unambig  ->  variable .   (rule 80)

    $default	reduce using rule 80 (unambig)



state 45

    variable  ->  scalar .   (rule 31)

    $default	reduce using rule 31 (variable)



state 46

    variable  ->  array .   (rule 32)
    subscr  ->  array . SUB sublist   (rule 58)
    subscr1  ->  array . SUB sublist1   (rule 59)

    SUB 	shift, and go to state 88

    $default	reduce using rule 32 (variable)



state 47

    osubscr  ->  oparray . SUB sublist   (rule 66)
    osubscr1  ->  oparray . SUB sublist1   (rule 67)

    SUB 	shift, and go to state 97



state 48

    unambig  ->  constant .   (rule 81)

    $default	reduce using rule 81 (unambig)



state 49

    expr  ->  subscr .   (rule 75)

    $default	reduce using rule 75 (expr)



state 50

    expr  ->  osubscr .   (rule 76)

    $default	reduce using rule 76 (expr)



state 51

    osubscr  ->  osubscr1 .   (rule 65)

    $default	reduce using rule 65 (osubscr)



state 52

    perform  ->  FORGET expr .   (rule 13)

    $default	reduce using rule 13 (perform)



state 53

    unambig  ->  preftype . UNARY NUMBER   (rule 82)

    UNARY	shift, and go to state 98



state 54

    expr  ->  unambig .   (rule 68)
    expr  ->  unambig . SELECT unambig   (rule 69)
    expr  ->  unambig . SELECT subscr   (rule 70)
    expr  ->  unambig . SELECT osubscr   (rule 71)
    expr  ->  unambig . MINGLE unambig   (rule 72)
    expr  ->  unambig . MINGLE subscr   (rule 73)
    expr  ->  unambig . MINGLE osubscr   (rule 74)

    MINGLE	shift, and go to state 99
    SELECT	shift, and go to state 100

    $default	reduce using rule 68 (expr)



state 55

    perform  ->  RESUME expr .   (rule 14)

    $default	reduce using rule 14 (perform)



state 56

    varlist  ->  variable .   (rule 42)

    $default	reduce using rule 42 (varlist)



state 57

    variable  ->  array .   (rule 32)

    $default	reduce using rule 32 (variable)



state 58

    perform  ->  STASH varlist .   (rule 15)
    varlist  ->  varlist . INTERSECTION variable   (rule 43)

    INTERSECTION	shift, and go to state 101

    $default	reduce using rule 15 (perform)



state 59

    perform  ->  RETRIEVE varlist .   (rule 16)
    varlist  ->  varlist . INTERSECTION variable   (rule 43)

    INTERSECTION	shift, and go to state 101

    $default	reduce using rule 16 (perform)



state 60

    perform  ->  IGNORE varlist .   (rule 17)
    varlist  ->  varlist . INTERSECTION variable   (rule 43)

    INTERSECTION	shift, and go to state 101

    $default	reduce using rule 17 (perform)



state 61

    perform  ->  REMEMBER varlist .   (rule 18)
    varlist  ->  varlist . INTERSECTION variable   (rule 43)

    INTERSECTION	shift, and go to state 101

    $default	reduce using rule 18 (perform)



state 62

    gerunds  ->  GERUND .   (rule 29)

    $default	reduce using rule 29 (gerunds)



state 63

    perform  ->  ABSTAIN LABEL .   (rule 19)

    $default	reduce using rule 19 (perform)



state 64

    perform  ->  ABSTAIN gerunds .   (rule 20)
    gerunds  ->  gerunds . INTERSECTION GERUND   (rule 30)

    INTERSECTION	shift, and go to state 102

    $default	reduce using rule 20 (perform)



state 65

    perform  ->  REINSTATE LABEL .   (rule 21)

    $default	reduce using rule 21 (perform)



state 66

    perform  ->  REINSTATE gerunds .   (rule 22)
    gerunds  ->  gerunds . INTERSECTION GERUND   (rule 30)

    INTERSECTION	shift, and go to state 102

    $default	reduce using rule 22 (perform)



state 67

    constant  ->  MESH . NUMBER   (rule 41)

    NUMBER	shift, and go to state 90



state 68

    outitem  ->  scalar .   (rule 49)

    $default	reduce using rule 49 (outitem)



state 69

    outitem  ->  array .   (rule 52)
    subscr  ->  array . SUB sublist   (rule 58)
    subscr1  ->  array . SUB sublist1   (rule 59)

    SUB 	shift, and go to state 88

    $default	reduce using rule 52 (outitem)



state 70

    outitem  ->  constant .   (rule 51)

    $default	reduce using rule 51 (outitem)



state 71

    outlist  ->  outitem . INTERSECTION outlist   (rule 53)
    outlist  ->  outitem .   (rule 54)

    INTERSECTION	shift, and go to state 103

    $default	reduce using rule 54 (outlist)



state 72

    perform  ->  READ_OUT outlist .   (rule 24)

    $default	reduce using rule 24 (perform)



state 73

    outitem  ->  subscr .   (rule 50)

    $default	reduce using rule 50 (outitem)



state 74

    initem  ->  scalar .   (rule 44)

    $default	reduce using rule 44 (initem)



state 75

    initem  ->  array .   (rule 46)
    subscr  ->  array . SUB sublist   (rule 58)
    subscr1  ->  array . SUB sublist1   (rule 59)

    SUB 	shift, and go to state 88

    $default	reduce using rule 46 (initem)



state 76

    inlist  ->  initem . INTERSECTION inlist   (rule 47)
    inlist  ->  initem .   (rule 48)

    INTERSECTION	shift, and go to state 104

    $default	reduce using rule 48 (inlist)



state 77

    perform  ->  WRITE_IN inlist .   (rule 23)

    $default	reduce using rule 23 (perform)



state 78

    initem  ->  subscr .   (rule 45)

    $default	reduce using rule 45 (initem)



state 79

    perform  ->  COME_FROM LABEL .   (rule 26)

    $default	reduce using rule 26 (perform)



state 80

    scalar  ->  ONESPOT NUMBER .   (rule 35)

    $default	reduce using rule 35 (scalar)



state 81

    scalar  ->  TWOSPOT NUMBER .   (rule 36)

    $default	reduce using rule 36 (scalar)



state 82

    array  ->  TAIL NUMBER .   (rule 37)

    $default	reduce using rule 37 (array)



state 83

    array  ->  HYBRID NUMBER .   (rule 38)

    $default	reduce using rule 38 (array)



state 84

    command  ->  please OHOHSEVEN perform .   (rule 4)

    $default	reduce using rule 4 (command)



state 85

    perform  ->  LABEL NEXT .   (rule 12)

    $default	reduce using rule 12 (perform)



state 86

    perform  ->  lvalue GETS . expr   (rule 10)

    MESH	shift, and go to state 37
    ONESPOT	shift, and go to state 38
    TWOSPOT	shift, and go to state 39
    TAIL	shift, and go to state 40
    HYBRID	shift, and go to state 41
    SPARK	shift, and go to state 42
    EARS	shift, and go to state 43

    variable	go to state 44
    scalar	go to state 45
    array	go to state 46
    oparray	go to state 47
    constant	go to state 48
    subscr	go to state 49
    subscr1	go to state 34
    osubscr	go to state 50
    osubscr1	go to state 51
    expr	go to state 105
    preftype	go to state 53
    unambig	go to state 54



state 87

    perform  ->  array GETS . byexpr   (rule 11)

    MESH	shift, and go to state 37
    ONESPOT	shift, and go to state 38
    TWOSPOT	shift, and go to state 39
    TAIL	shift, and go to state 40
    HYBRID	shift, and go to state 41
    SPARK	shift, and go to state 42
    EARS	shift, and go to state 43

    variable	go to state 44
    scalar	go to state 45
    array	go to state 46
    oparray	go to state 47
    constant	go to state 48
    byexpr	go to state 106
    subscr	go to state 49
    subscr1	go to state 34
    osubscr	go to state 50
    osubscr1	go to state 51
    expr	go to state 107
    preftype	go to state 53
    unambig	go to state 54



state 88

    subscr  ->  array SUB . sublist   (rule 58)
    subscr1  ->  array SUB . sublist1   (rule 59)

    MESH	shift, and go to state 37
    ONESPOT	shift, and go to state 38
    TWOSPOT	shift, and go to state 39
    TAIL	shift, and go to state 40
    HYBRID	shift, and go to state 41
    SPARK	shift, and go to state 42
    EARS	shift, and go to state 43

    variable	go to state 44
    scalar	go to state 45
    array	go to state 108
    oparray	go to state 109
    constant	go to state 48
    subscr1	go to state 110
    sublist	go to state 111
    sublist1	go to state 112
    osubscr1	go to state 113
    preftype	go to state 53
    unambig	go to state 114



state 89

    command  ->  LABEL please OHOHSEVEN perform .   (rule 6)

    $default	reduce using rule 6 (command)



state 90

    constant  ->  MESH NUMBER .   (rule 41)

    $default	reduce using rule 41 (constant)



state 91

    oparray  ->  TAIL UNARY . NUMBER   (rule 39)

    NUMBER	shift, and go to state 115



state 92

    oparray  ->  HYBRID UNARY . NUMBER   (rule 40)

    NUMBER	shift, and go to state 116



state 93

    unambig  ->  SPARK UNARY . expr SPARK   (rule 83)

    MESH	shift, and go to state 37
    ONESPOT	shift, and go to state 38
    TWOSPOT	shift, and go to state 39
    TAIL	shift, and go to state 40
    HYBRID	shift, and go to state 41
    SPARK	shift, and go to state 42
    EARS	shift, and go to state 43

    variable	go to state 44
    scalar	go to state 45
    array	go to state 46
    oparray	go to state 47
    constant	go to state 48
    subscr	go to state 49
    subscr1	go to state 34
    osubscr	go to state 50
    osubscr1	go to state 51
    expr	go to state 117
    preftype	go to state 53
    unambig	go to state 54



state 94

    unambig  ->  SPARK expr . SPARK   (rule 85)

    SPARK	shift, and go to state 118



state 95

    unambig  ->  EARS UNARY . expr EARS   (rule 84)

    MESH	shift, and go to state 37
    ONESPOT	shift, and go to state 38
    TWOSPOT	shift, and go to state 39
    TAIL	shift, and go to state 40
    HYBRID	shift, and go to state 41
    SPARK	shift, and go to state 42
    EARS	shift, and go to state 43

    variable	go to state 44
    scalar	go to state 45
    array	go to state 46
    oparray	go to state 47
    constant	go to state 48
    subscr	go to state 49
    subscr1	go to state 34
    osubscr	go to state 50
    osubscr1	go to state 51
    expr	go to state 119
    preftype	go to state 53
    unambig	go to state 54



state 96

    unambig  ->  EARS expr . EARS   (rule 86)

    EARS	shift, and go to state 120



state 97

    osubscr  ->  oparray SUB . sublist   (rule 66)
    osubscr1  ->  oparray SUB . sublist1   (rule 67)

    MESH	shift, and go to state 37
    ONESPOT	shift, and go to state 38
    TWOSPOT	shift, and go to state 39
    TAIL	shift, and go to state 40
    HYBRID	shift, and go to state 41
    SPARK	shift, and go to state 42
    EARS	shift, and go to state 43

    variable	go to state 44
    scalar	go to state 45
    array	go to state 108
    oparray	go to state 109
    constant	go to state 48
    subscr1	go to state 110
    sublist	go to state 121
    sublist1	go to state 122
    osubscr1	go to state 113
    preftype	go to state 53
    unambig	go to state 114



state 98

    unambig  ->  preftype UNARY . NUMBER   (rule 82)

    NUMBER	shift, and go to state 123



state 99

    expr  ->  unambig MINGLE . unambig   (rule 72)
    expr  ->  unambig MINGLE . subscr   (rule 73)
    expr  ->  unambig MINGLE . osubscr   (rule 74)

    MESH	shift, and go to state 37
    ONESPOT	shift, and go to state 38
    TWOSPOT	shift, and go to state 39
    TAIL	shift, and go to state 40
    HYBRID	shift, and go to state 41
    SPARK	shift, and go to state 42
    EARS	shift, and go to state 43

    variable	go to state 44
    scalar	go to state 45
    array	go to state 46
    oparray	go to state 47
    constant	go to state 48
    subscr	go to state 124
    subscr1	go to state 34
    osubscr	go to state 125
    osubscr1	go to state 51
    preftype	go to state 53
    unambig	go to state 126



state 100

    expr  ->  unambig SELECT . unambig   (rule 69)
    expr  ->  unambig SELECT . subscr   (rule 70)
    expr  ->  unambig SELECT . osubscr   (rule 71)

    MESH	shift, and go to state 37
    ONESPOT	shift, and go to state 38
    TWOSPOT	shift, and go to state 39
    TAIL	shift, and go to state 40
    HYBRID	shift, and go to state 41
    SPARK	shift, and go to state 42
    EARS	shift, and go to state 43

    variable	go to state 44
    scalar	go to state 45
    array	go to state 46
    oparray	go to state 47
    constant	go to state 48
    subscr	go to state 127
    subscr1	go to state 34
    osubscr	go to state 128
    osubscr1	go to state 51
    preftype	go to state 53
    unambig	go to state 129



state 101

    varlist  ->  varlist INTERSECTION . variable   (rule 43)

    ONESPOT	shift, and go to state 22
    TWOSPOT	shift, and go to state 23
    TAIL	shift, and go to state 24
    HYBRID	shift, and go to state 25

    variable	go to state 130
    scalar	go to state 45
    array	go to state 57



state 102

    gerunds  ->  gerunds INTERSECTION . GERUND   (rule 30)

    GERUND	shift, and go to state 131



state 103

    outlist  ->  outitem INTERSECTION . outlist   (rule 53)

    MESH	shift, and go to state 67
    ONESPOT	shift, and go to state 22
    TWOSPOT	shift, and go to state 23
    TAIL	shift, and go to state 24
    HYBRID	shift, and go to state 25

    scalar	go to state 68
    array	go to state 69
    constant	go to state 70
    outitem	go to state 71
    outlist	go to state 132
    subscr	go to state 73
    subscr1	go to state 34



state 104

    inlist  ->  initem INTERSECTION . inlist   (rule 47)

    ONESPOT	shift, and go to state 22
    TWOSPOT	shift, and go to state 23
    TAIL	shift, and go to state 24
    HYBRID	shift, and go to state 25

    scalar	go to state 74
    array	go to state 75
    initem	go to state 76
    inlist	go to state 133
    subscr	go to state 78
    subscr1	go to state 34



state 105

    perform  ->  lvalue GETS expr .   (rule 10)

    $default	reduce using rule 10 (perform)



state 106

    perform  ->  array GETS byexpr .   (rule 11)

    $default	reduce using rule 11 (perform)



state 107

    byexpr  ->  expr . BY byexpr   (rule 55)
    byexpr  ->  expr .   (rule 56)

    BY  	shift, and go to state 134

    $default	reduce using rule 56 (byexpr)



state 108

    variable  ->  array .   (rule 32)
    subscr1  ->  array . SUB sublist1   (rule 59)

    SUB 	shift, and go to state 135

    $default	reduce using rule 32 (variable)



state 109

    osubscr1  ->  oparray . SUB sublist1   (rule 67)

    SUB 	shift, and go to state 136



state 110

    sublist1  ->  subscr1 .   (rule 62)

    $default	reduce using rule 62 (sublist1)



state 111

    subscr  ->  array SUB sublist .   (rule 58)

    $default	reduce using rule 58 (subscr)



state 112

    subscr1  ->  array SUB sublist1 .   (rule 59)

    $default	reduce using rule 59 (subscr1)



state 113

    sublist1  ->  osubscr1 .   (rule 63)

    $default	reduce using rule 63 (sublist1)



state 114

    sublist  ->  unambig . sublist   (rule 60)
    sublist  ->  unambig . sublist1   (rule 61)
    sublist1  ->  unambig .   (rule 64)

    MESH	shift, and go to state 37
    ONESPOT	shift, and go to state 38
    TWOSPOT	shift, and go to state 39
    TAIL	shift, and go to state 40
    HYBRID	shift, and go to state 41

    $default	reduce using rule 64 (sublist1)

    variable	go to state 44
    scalar	go to state 45
    array	go to state 108
    oparray	go to state 109
    constant	go to state 48
    subscr1	go to state 110
    sublist	go to state 137
    sublist1	go to state 138
    osubscr1	go to state 113
    preftype	go to state 53
    unambig	go to state 114



state 115

    oparray  ->  TAIL UNARY NUMBER .   (rule 39)

    $default	reduce using rule 39 (oparray)



state 116

    oparray  ->  HYBRID UNARY NUMBER .   (rule 40)

    $default	reduce using rule 40 (oparray)



state 117

    unambig  ->  SPARK UNARY expr . SPARK   (rule 83)

    SPARK	shift, and go to state 139



state 118

    unambig  ->  SPARK expr SPARK .   (rule 85)

    $default	reduce using rule 85 (unambig)



state 119

    unambig  ->  EARS UNARY expr . EARS   (rule 84)

    EARS	shift, and go to state 140



state 120

    unambig  ->  EARS expr EARS .   (rule 86)

    $default	reduce using rule 86 (unambig)



state 121

    osubscr  ->  oparray SUB sublist .   (rule 66)

    $default	reduce using rule 66 (osubscr)



state 122

    osubscr1  ->  oparray SUB sublist1 .   (rule 67)

    $default	reduce using rule 67 (osubscr1)



state 123

    unambig  ->  preftype UNARY NUMBER .   (rule 82)

    $default	reduce using rule 82 (unambig)



state 124

    expr  ->  unambig MINGLE subscr .   (rule 73)

    $default	reduce using rule 73 (expr)



state 125

    expr  ->  unambig MINGLE osubscr .   (rule 74)

    $default	reduce using rule 74 (expr)



state 126

    expr  ->  unambig MINGLE unambig .   (rule 72)

    $default	reduce using rule 72 (expr)



state 127

    expr  ->  unambig SELECT subscr .   (rule 70)

    $default	reduce using rule 70 (expr)



state 128

    expr  ->  unambig SELECT osubscr .   (rule 71)

    $default	reduce using rule 71 (expr)



state 129

    expr  ->  unambig SELECT unambig .   (rule 69)

    $default	reduce using rule 69 (expr)



state 130

    varlist  ->  varlist INTERSECTION variable .   (rule 43)

    $default	reduce using rule 43 (varlist)



state 131

    gerunds  ->  gerunds INTERSECTION GERUND .   (rule 30)

    $default	reduce using rule 30 (gerunds)



state 132

    outlist  ->  outitem INTERSECTION outlist .   (rule 53)

    $default	reduce using rule 53 (outlist)



state 133

    inlist  ->  initem INTERSECTION inlist .   (rule 47)

    $default	reduce using rule 47 (inlist)



state 134

    byexpr  ->  expr BY . byexpr   (rule 55)

    MESH	shift, and go to state 37
    ONESPOT	shift, and go to state 38
    TWOSPOT	shift, and go to state 39
    TAIL	shift, and go to state 40
    HYBRID	shift, and go to state 41
    SPARK	shift, and go to state 42
    EARS	shift, and go to state 43

    variable	go to state 44
    scalar	go to state 45
    array	go to state 46
    oparray	go to state 47
    constant	go to state 48
    byexpr	go to state 141
    subscr	go to state 49
    subscr1	go to state 34
    osubscr	go to state 50
    osubscr1	go to state 51
    expr	go to state 107
    preftype	go to state 53
    unambig	go to state 54



state 135

    subscr1  ->  array SUB . sublist1   (rule 59)

    MESH	shift, and go to state 37
    ONESPOT	shift, and go to state 38
    TWOSPOT	shift, and go to state 39
    TAIL	shift, and go to state 40
    HYBRID	shift, and go to state 41
    SPARK	shift, and go to state 42
    EARS	shift, and go to state 43

    variable	go to state 44
    scalar	go to state 45
    array	go to state 108
    oparray	go to state 109
    constant	go to state 48
    subscr1	go to state 110
    sublist1	go to state 112
    osubscr1	go to state 113
    preftype	go to state 53
    unambig	go to state 142



state 136

    osubscr1  ->  oparray SUB . sublist1   (rule 67)

    MESH	shift, and go to state 37
    ONESPOT	shift, and go to state 38
    TWOSPOT	shift, and go to state 39
    TAIL	shift, and go to state 40
    HYBRID	shift, and go to state 41
    SPARK	shift, and go to state 42
    EARS	shift, and go to state 43

    variable	go to state 44
    scalar	go to state 45
    array	go to state 108
    oparray	go to state 109
    constant	go to state 48
    subscr1	go to state 110
    sublist1	go to state 122
    osubscr1	go to state 113
    preftype	go to state 53
    unambig	go to state 142



state 137

    sublist  ->  unambig sublist .   (rule 60)

    $default	reduce using rule 60 (sublist)



state 138

    sublist  ->  unambig sublist1 .   (rule 61)

    $default	reduce using rule 61 (sublist)



state 139

    unambig  ->  SPARK UNARY expr SPARK .   (rule 83)

    $default	reduce using rule 83 (unambig)



state 140

    unambig  ->  EARS UNARY expr EARS .   (rule 84)

    $default	reduce using rule 84 (unambig)



state 141

    byexpr  ->  expr BY byexpr .   (rule 55)

    $default	reduce using rule 55 (byexpr)



state 142

    sublist1  ->  unambig .   (rule 64)

    $default	reduce using rule 64 (sublist1)



state 143

    $   	go to state 144



state 144

    $default	accept
